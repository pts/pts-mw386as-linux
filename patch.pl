#!/bin/sh --
eval 'PERL_BADLANG=x;export PERL_BADLANG;exec perl -x "$0" "$@";exit 1'
#!perl  # Start marker used by perl -x.
+0 if 0;eval("\n\n\n\n".<<'__END__');die$@if$@;__END__

#
# patch.pl: change the memory base of .text from 0 of a specific Linux i386 executable
# by pts@fazekas.hu at Fri Apr  5 20:49:25 CEST 2024
#
# Usage: perl -x patch.pl <input-file> <output-file> <new-text-base>
# Minimum <new-text-base> value on Linux is 0x10000
#

BEGIN { $^W = 1 }
use integer;
use strict;

# --- Program-specific patch.

my $expected_size = 69024;
my $expected_entry = 0xa8;
my @patch_addrs = (
    0x18,  # ELF-32 entry point.
    0x3c,  # Section .text (phdr0) vaddr.
    0x40,  # Section .text (phdr0) paddr.

    # Instructions in .text which refer to data in .text by absolute position.
    0x14a+1,
    0x1cb+1,
    0x20d+1,
    0x257+1,
    0x2f7+1,
    0x3cf+1,
    0x3eb+1,
    0x404+1,
    0x425+1,
    0x510+1,
    0x5fd+1,
    0x635+1,
    0x719+1,
    0x790+3,
    0x7d3+1,
    0x80e+1,
    0x83a+1,
    0x87b+1,
    0x8a6+1,
    0x9be+1,
    0xa0c+1,
    0xa4b+3,
    0xa55+1,
    0xb33+1,
    0xb5d+3,
    0xb67+1,
    0xbda+3,
    0xbea+3,
    0xc21+3,
    0x134b+1,
    0x136d+1,
    0x1404+3,
    0x140b+3,
    0x1415+1,
    0x513f+2,
    0x5151+1,
    0x5168+1,
    0x51b6+2,
    0x51f7+2,
    0x52ec+1,
    0x53de+1,
    0x5515+3,
    0x5538+1,
    0x553f+1,
    0x5546+1,
    0x5581+1,
    0x5598+1,
    0x5697+1,
    0x56ae+1,
    0x56c7+3,
    0x599d+2,
    0x59e9+1,
    0x5a03+2,
    0x5a31+2,
    0x5a49+1,
    0x5a82+3,
    0x5b3a+1,
    0x5b98+1,
    0x5bc9+3,
    0x5c7a+1,
    0x5cae+2,
    0x5cf3+2,
    0x5d26+2,
    0x5d74+2,
    0x5e6b+1,
    0x5eb8+1,
    0x5ecb+1,
    0x5f63+1,
    0x5fa5+1,
    0x6032+1,
    0x6075+1,
    0x60b7+1,
    0x6106+3,
    0x630d+2,
    0x631d+1,
    0x6368+2,
    0x6378+1,
    0x638f+2,
    0x63a3+2,
    0x63b0+2,
    0x63d5+2,
    0x643d+1,
    0x6509+1,
    0x656b+1,
    0x65bf+1,
    0x65ed+1,
    0x662d+1,
    0x6689+1,
    0x66e1+1,
    0x67b1+1,
    0x67d1+1,
    0x6a19+1,
    0x6b12+2,
    0x6b1f+1,
    0x6d12+1,
    0x6d42+2,
    0x701f+1,
    0x716f+1,
    0x718b+1,
    0x71ca+1,
    0x71ea+1,
    0x7222+1,
    0x72b5+1,
    0x7339+1,
    0x734e+1,
    0x741b+1,
    0x7480+1,
    0x750d+1,
    0x76ce+1,
    0x7706+1,
    0x771f+1,  # !! Why was this missing? It's just a `push offset'. What other instruction is missing? Do it again.
    0x7761+1,
    0x779f+1,
    0x77fa+1,
    0x789c+1,
    0x78c8+1,
    0x7956+1,
    0x7960+1,
    0x79d7+1,
    0x7a1f+3,
    0x7b35+1,
    0x7b45+1,
    0x7b6c+1,
    0x7b7c+1,
    0x7bd3+1,
    0x7c00+1,
    0x7daa+1,
    0x7dce+1,
    0x7deb+1,
    0x7e05+1,
    0x7e1e+1,
    0x7e51+1,
    0x7ebf+1,
    0x7f3e+1,
    0x7f61+1,
    0x7f77+1,
    0x7f9a+1,
    0x7faf+1,
    0x7feb+1,
    0x801f+1,
    0x80d4+1,
    0x815c+1,
    0x81f4+1,
    0x81fe+1,
    0x8299+1,
    0x8383+1,
    0x83b1+3,
    0x83da+1,
    0x8530+1,
    0x8573+1,
    0x8679+1,
    0x8698+1,
    0x86b6+1,
    0x86ee+1,
    0x8aab+1,
    0x8b43+1,
    0x8b9f+1,
    0x8bd3+1,
    0x8c4e+3,
    0x9199+3,
    0x91df+3,
    0x953c+1,
    0x9618+1,
    0x9687+1,
    0x96d3+1,
    0x986e+1,
    0x98a5+1,
    0x98dc+1,
    0x9946+3,
    0x9bc8+3,
    0x9be0+3,
    0x9e53+1,
    0x9f30+1,
    0xa22c+2,
    0xa25c+6,
    0xa3f1+6,
    0xa46a+1,
    0xa482+1,
    0xa49a+1,
    0xa4c9+1,
    0xa4dc+1,
    0xa531+1,
    0xa55b+2,
    0xa673+1,
    0xa7f7+2,
    0xa82c+1,
    0xa883+2,
    0xa8b8+1,
    0xa8f4+2,
    0xa949+2,
    0xac30+1,
    0xac56+1,
    0xadde+1,
    0xae17+1,
    0xaf6a+1,
    0xafb3+2,
    0xafcb+1,
    0xb026+1,
    0xb1a9+2,
    0xb46d+2,
    0xb59d+1,
    0xb679+1,
    0xb90c+1,
    0xb958+1,
    0xb980+1,
    0xba69+2,
    0xbadd+1,
    0xbb20+1,
    0xbbf3+1,
    0xbc45+2,
    0xbfe6+1,
    0xc058+1,
    0xc7ab+1,
    0xc7d1+1,
    0xca5d+1,
    0xcc3e+2,
    0xcd72+2,
    0xcd8c+2,
    0xcdad+2,
    0xcdc2+2,
    0xcde3+2,
    0xcdf8+2,
    0xce18+2,
    0xce2d+2,
    0xce52+2,
    0xce61+2,
    0xce70+2,
    0xce7f+2,
    0xce8e+2,
    0xcea0+2,
    0xcee1+2,
    0xceee+2,
    0xcefb+2,
    0xcf0a+2,
    0xcf17+2,
    0xcf26+2,
    0xcf3a+2,
    0xcffa+2,
    0xd007+2,
    0xd014+2,
    0xd021+2,
    0xd203+1,
    0xd21f+1,
    0xd23f+1,
    0xe0bb+1,
    0xe204+3,
    0xe3a6+2,
    0xe3b9+2,
    0xe416+2,
    0xe429+2,
    0xe467+1,
    0xe512+3,
    0xe519+3,
    0xe534+3,
    0xe53b+3,
    0xe547+3,
    0xe54e+3,
    0xe59e+2,
    0xe89f+1,
    0xe943+1,
    0xeac7+3,
    0xeace+3,
    0xec87+3,
    0xeca4+3,
    0xecad+3,
    #0xeda8+...,  # Part of a callback never called. We're overwriting it with `nop's.

    # Data dwords (`dd offset ...') in .text or .data pointing to .text.
    0x2b1,
    0x2b5,
    0x2b9,
    0x2bd,
    0x2c1,
    0x2c5,
    0x2c9,
    0x2cd,
    0x2d1,
    0x2d5,
    0x2d9,
    0x2dd,
    0x2e1,
    0x2e5,
    0x2e9,
    0x2ed,
    0x797,
    0x79b,
    0x79f,
    0x7a3,
    0x7a7,
    0x7ab,
    0x7af,
    0x7b3,
    0x7b7,
    0xc28,
    0xc2c,
    0xc30,
    0xc34,
    0xc38,
    0xc3c,
    0xc40,
    0xc44,
    0xc48,
    0xc4c,
    0xc50,
    0xc54,
    0xc58,
    0xc5c,
    0xc60,
    0xc64,
    0xc68,
    0xc6c,
    0xc70,
    0xc74,
    0xc78,
    0xc7c,
    0xc80,
    0xc84,
    0xc88,
    0xc8c,
    0xc90,
    0xc94,
    0xc98,
    0xc9c,
    0xca0,
    0xca4,
    0xca8,
    0xcac,
    0xcb0,
    0xcb4,
    0xcb8,
    0xcbc,
    0xcc0,
    0xcc4,
    0xcc8,
    0xccc,
    0xcd0,
    0xcd4,
    0xcd8,
    0xcdc,
    0xce0,
    0xce4,
    0xce8,
    0xcec,
    0xcf0,
    0xcf4,
    0xcf8,
    0xcfc,
    0xd00,
    0xd04,
    0xd08,
    0xd0c,
    0xd10,
    0xd14,
    0xd18,
    0xd1c,
    0xd20,
    0xd24,
    0xd28,
    0xd2c,
    0xd30,
    0xd34,
    0xd38,
    0xd3c,
    0xd40,
    0xd44,
    0xd48,
    0xd4c,
    0xd50,
    0xd54,
    0xd58,
    0xd5c,
    0xd60,
    0xd64,
    0xd68,
    0xd6c,
    0xd70,
    0xd74,
    0xd78,
    0xd7c,
    0xd80,
    0xd84,
    0xd88,
    0xd8c,
    0xd90,
    0xd94,
    0xd98,
    0xd9c,
    0xda0,
    0xda4,
    0xda8,
    0xdac,
    0xdb0,
    0xdb4,
    0xdb8,
    0xdbc,
    0xdc0,
    0xdc4,
    0xdc8,
    0x551c,
    0x5520,
    0x5524,
    0x5528,
    0x552c,
    0x5530,
    0x5534,
    0x56ce,
    0x56d2,
    0x56d6,
    0x56da,
    0x56de,
    0x56e2,
    0x56e6,
    0x56ea,
    0x5a89,
    0x5a8d,
    0x5a91,
    0x5a95,
    0x5a99,
    0x5a9d,
    0x5aa1,
    0x5aa5,
    0x5bd0,
    0x5bd4,
    0x5bd8,
    0x5bdc,
    0x5be0,
    0x5be4,
    0x5be8,
    0x5bec,
    0x5bf0,
    0x5bf4,
    0x5bf8,
    0x5bfc,
    0x5c00,
    0x5c04,
    0x5c08,
    0x5c0c,
    0x5c10,
    0x5c14,
    0x5c18,
    0x5c1c,
    0x5c20,
    0x5c24,
    0x5c28,
    0x5c2c,
    0x5c30,
    0x5c34,
    0x5c38,
    0x5efd,
    0x5f01,
    0x5f05,
    0x5f09,
    0x5f0d,
    0x5f11,
    0x5f8d,
    0x5f91,
    0x5f95,
    0x5f99,
    0x5f9d,
    0x5fef,
    0x5ff3,
    0x5ff7,
    0x5ffb,
    0x5fff,
    0x6003,
    0x6007,
    0x600b,
    0x600f,
    0x6013,
    0x6017,
    0x601b,
    0x609f,
    0x60a3,
    0x60a7,
    0x60ab,
    0x60af,
    0x60e5,
    0x60e9,
    0x60ed,
    0x60f1,
    0x60f5,
    0x610d,
    0x6111,
    0x6115,
    0x6119,
    0x611d,
    0x6121,
    0x6125,
    0x6129,
    0x612d,
    0x6131,
    0x6135,
    0x6139,
    0x613d,
    0x6141,
    0x6145,
    0x6149,
    0x614d,
    0x6151,
    0x6155,
    0x6159,
    0x615d,
    0x6161,
    0x6165,
    0x6169,
    0x616d,
    0x6171,
    0x6175,
    0x6179,
    0x617d,
    0x6181,
    0x6185,
    0x6189,
    0x618d,
    0x6191,
    0x6195,
    0x6199,
    0x619d,
    0x61a1,
    0x61a5,
    0x61a9,
    0x61ad,
    0x61b1,
    0x61b5,
    0x61b9,
    0x61bd,
    0x61c1,
    0x61c5,
    0x61c9,
    0x61cd,
    0x61d1,
    0x61d5,
    0x61d9,
    0x61dd,
    0x61e1,
    0x61e5,
    0x61e9,
    0x61ed,
    0x61f1,
    0x61f5,
    0x61f9,
    0x61fd,
    0x6201,
    0x6205,
    0x6209,
    0x620d,
    0x6211,
    0x6215,
    0x6219,
    0x621d,
    0x6221,
    0x6225,
    0x6229,
    0x622d,
    0x6231,
    0x6235,
    0x6239,
    0x623d,
    0x6241,
    0x6245,
    0x6249,
    0x624d,
    0x6251,
    0x6255,
    0x6259,
    0x625d,
    0x6261,
    0x6265,
    0x6269,
    0x626d,
    0x6271,
    0x6275,
    0x6279,
    0x627d,
    0x6281,
    0x6285,
    0x6289,
    0x628d,
    0x6291,
    0x6295,
    0x6299,
    0x629d,
    0x62a1,
    0x62a5,
    0x62a9,
    0x62ad,
    0x62b1,
    0x62b5,
    0x62b9,
    0x62bd,
    0x62c1,
    0x62c5,
    0x62c9,
    0x62cd,
    0x62d1,
    0x62d5,
    0x62d9,
    0x62dd,
    0x62e1,
    0x62e5,
    0x62e9,
    0x62ed,
    0x62f1,
    0x62f5,
    0x62f9,
    0x62fd,
    0x6301,
    0x6305,
    0x646b,
    0x646f,
    0x6473,
    0x6477,
    0x647b,
    0x6599,
    0x659d,
    0x65a1,
    0x65a5,
    0x65a9,
    0x66bf,
    0x66c3,
    0x66c7,
    0x66cb,
    0x66cf,
    0x66d3,
    0x66d7,
    0x78f6,
    0x78fa,
    0x78fe,
    0x7902,
    0x7906,
    0x7a26,
    0x7a2a,
    0x7a2e,
    0x7a32,
    0x7a36,
    0x7a3a,
    0x7a3e,
    0x7a42,
    0x7a46,
    0x7a4a,
    0x7a4e,
    0x7a52,
    0x7a56,
    0x7a5a,
    0x7a5e,
    0x7a62,
    0x7a66,
    0x7a6a,
    0x7a6e,
    0x7a72,
    0x7a76,
    0x7a7a,
    0x7a7e,
    0x7a82,
    0x7a86,
    0x7a8a,
    0x7a8e,
    0x7a92,
    0x7a96,
    0x7a9a,
    0x7a9e,
    0x7aa2,
    0x7aa6,
    0x7aaa,
    0x7aae,
    0x7ab2,
    0x7ab6,
    0x7aba,
    0x7abe,
    0x7ac2,
    0x7ac6,
    0x7aca,
    0x7ace,
    0x7ad2,
    0x7ad6,
    0x7ada,
    0x7ade,
    0x7ae2,
    0x7ae6,
    0x806d,
    0x8071,
    0x8075,
    0x8079,
    0x807d,
    0x8081,
    0x8085,
    0x8089,
    0x808d,
    0x8091,
    0x8095,
    0x8099,
    0x809d,
    0x83b8,
    0x83bc,
    0x83c0,
    0x83c4,
    0x83c8,
    0x83cc,
    0x8c55,
    0x8c59,
    0x8c5d,
    0x8c61,
    0x8c65,
    0x8c69,
    0x8c6d,
    0x8c71,
    0x8c75,
    0x8c79,
    0x8c7d,
    0x8c81,
    0x8c85,
    0x8c89,
    0x8c8d,
    0x8c91,
    0x8c95,
    0x8c99,
    0x8c9d,
    0x8ca1,
    0x8ca5,
    0x8ca9,
    0x8cad,
    0x8cb1,
    0x8cb5,
    0x8cb9,
    0x8cbd,
    0x8cc1,
    0x8cc5,
    0x8cc9,
    0x8ccd,
    0x8cd1,
    0x8cd5,
    0x8cd9,
    0x8cdd,
    0x8ce1,
    0x8ce5,
    0x8ce9,
    0x8ced,
    0x8cf1,
    0x8cf5,
    0x8cf9,
    0x91a0,
    0x91a4,
    0x91a8,
    0x91ac,
    0x91b0,
    0x91b4,
    0x91b8,
    0x91bc,
    0x91c0,
    0x91c4,
    0x91e6,
    0x91ea,
    0x91ee,
    0x91f2,
    0x91f6,
    0x91fa,
    0x91fe,
    0x9202,
    0x9206,
    0x920a,
    0x994d,
    0x9951,
    0x9955,
    0x9959,
    0x995d,
    0x9961,
    #0xaa18,  # A numeric constant, not a pointer.
    0xb936,
    0xb93a,
    0xb93e,
    0xb942,
    0xb946,
    0xe10d,
    0xe111,
    0xe115,
    0xe119,
    0xe11d,
    0xe121,
    0xe125,
    0xe129,
    0xe12d,
    0xe131,
    0xe135,
    0xe139,
    0xe13d,
    0xe141,
    #0x401f7c,  # Points to within .data.
    #0x4026e0,  # Points to within .data.
    0x40270c,
    0x402710,
    0x402714,
    0x402718,
    0x40271c,
    0x402720,
    0x402724,
    0x4027ac,
    0x4027b0,
    0x4027b4,
    0x4027b8,
    0x4027bc,
    0x4027c0,
    0x4027c4,
    0x4028c0,
    0x4028c4,
    0x4028c8,
    0x4028cc,
    0x4028d0,
    0x4028d4,
    0x4028d8,
    0x4028dc,
    0x4028e0,
    0x4028e4,
    0x4028e8,
    0x4028ec,
    0x4028f0,
    0x4028f4,
    0x4028f8,
    0x4028fc,
    0x402900,
    0x402904,
    0x402908,
    0x40290c,
    0x402910,
    0x402914,
    0x402918,
    0x40291c,
    0x402920,
    0x402924,
    0x402928,
    0x40292c,
    0x402930,
    0x402934,
    0x402938,
    0x40293c,
    0x402940,
    0x402944,
    0x402948,
    0x40294c,
    0x402950,
    0x402954,
    0x402958,
    0x40295c,
    0x402960,
    0x402964,
    #0x402ab4,  # Points to within .data.
    #0x402ab8,  # Points to within .data.
    #0x402abc,  # Points to within .data.
    0x402bb4,
    0x402bb8,
    0x402bd4,
    0x402bd8,
    0x402bf4,
    0x402bf8,
    #0x402c04,  # Points to within .data.
);

# Allowed memory addresses (same as offsets) as to-be-patched values.
my %allowed_text_addrs = map { $_ => 1 } (
    +0xa8,  # _start, referenced by the ELF-32 phdr as entry point (e_entry).
    +0x1005,
    +0x1015,
    +0x1026,
    +0x103a,
    +0x1048,
    +0x105d,
    +0x1074,
    +0x1086,
    +0x1098,
    +0x10a7,
    +0x10ba,
    +0x10c8,
    +0x10d9,
    +0x10e7,
    +0x10f0,
    +0x10f8,
    +0x1116,
    +0x1134,
    +0x1146,
    +0x1163,
    +0x1189,
    +0x1190,
    +0x119f,
    +0x11c4,
    +0x11ce,
    +0x11d8,
    +0x11e4,
    +0x1207,
    +0x1216,
    +0x1220,
    +0x122a,
    +0x1234,
    +0x123e,
    +0x1249,
    +0x125a,
    +0x1266,
    +0x1272,
    +0x127c,
    +0x1286,
    +0x1290,
    +0x1299,
    +0x12a7,
    +0x12b0,
    +0x12d4,
    +0x12e3,
    +0x12ef,
    +0x12fe,
    +0x1305,
    +0x1314,
    +0x1327,
    +0x133c,
    +0x135b,
    +0x137d,
    +0x1384,
    +0x138c,
    +0x13a1,
    +0x13b3,
    +0x13c5,
    +0x13d7,
    +0x13e4,
    +0x13ef,
    +0x1401,
    +0x1444,
    +0x14b0,
    +0x151c,
    +0x152c,
    +0x1824,
    +0x18dc,
    +0x1aa0,
    +0x26d,
    +0x2f1,
    +0x30f,
    +0x327,
    +0x3328,
    +0x333,
    +0x333d,
    +0x3370,
    +0x3392,
    +0x339c,
    +0x33c3,
    +0x33ee,
    +0x33f,
    +0x340f,
    +0x3414,
    +0x3423,
    +0x3433,
    +0x3440,
    +0x3444,
    +0x3448,
    +0x34b,
    +0x363,
    +0x36f,
    +0x387,
    +0x39c,
    +0x3a8,
    +0x3b00,
    +0x3b4,
    +0x3fd,
    +0x404,
    +0x415,
    +0x42d4,
    +0x5100,
    +0x5107,
    +0x510f,
    +0x5117,
    +0x511e,
    +0x520,
    +0x53d,
    +0x551c,
    +0x5538,
    +0x553f,
    +0x5546,
    +0x5551,
    +0x56b,
    +0x56ce,
    +0x56e,
    +0x56ee,
    +0x570b,
    +0x5745,
    +0x575e,
    +0x57d8,
    +0x57f0,
    +0x580d,
    +0x5823,
    +0x58c,
    +0x58f,
    +0x5a89,
    +0x5a9,
    +0x5aa9,
    +0x5ac6,
    +0x5add,
    +0x5ae8,
    +0x5b27,
    +0x5b32,
    +0x5b52,
    +0x5baa,
    +0x5bd0,
    +0x5c3c,
    +0x5c8,
    +0x5c94,
    +0x5cef,
    +0x5d0,
    +0x5d22,
    +0x5d50,
    +0x5d70,
    +0x5ec7,
    +0x5ee1,
    +0x5f15,
    +0x5f75,
    +0x5fa1,
    +0x5fbb,
    +0x601f,
    +0x6054,
    +0x6087,
    +0x60b3,
    +0x60cd,
    +0x60f9,
    +0x610d,
    +0x6309,
    +0x6364,
    +0x638b,
    +0x63d1,
    +0x6408,
    +0x6439,
    +0x6453,
    +0x647f,
    +0x64cf,
    +0x64f7,
    +0x6538,
    +0x6567,
    +0x6581,
    +0x65ad,
    +0x65f8,
    +0x6656,
    +0x666b,
    +0x6685,
    +0x669f,
    +0x66db,
    +0x66f1,
    +0x6705,
    +0x6716,
    +0x6727,
    +0x6738,
    +0x6792,
    +0x67f7,
    +0x682b,
    +0x685f,
    +0x688b,
    +0x68a1,
    +0x68c8,
    +0x68df,
    +0x6905,
    +0x690f,
    +0x6922,
    +0x6943,
    +0x6956,
    +0x6977,
    +0x69bd,
    +0x69e7,
    +0x69f5,
    +0x6a62,
    +0x6acb,
    +0x6b29,
    +0x6b60,
    +0x6b8a,
    +0x6b98,
    +0x6ba6,
    +0x6bb4,
    +0x6bc2,
    +0x6bcc,
    +0x6bd6,
    +0x6be0,
    +0x6c0d,
    +0x6c17,
    +0x6c21,
    +0x6c2b,
    +0x6c35,
    +0x6c3f,
    +0x6c49,
    +0x6c58,
    +0x6c7c,
    +0x6ca0,
    +0x6cb2,
    +0x6cc4,
    +0x6cce,
    +0x6cf0,
    +0x6d12,
    +0x6d1c,
    +0x6d2a,
    +0x6da8,
    +0x6dd1,
    +0x6dfc,
    +0x6e03,
    +0x6e20,
    +0x6e2e,
    +0x6e3c,
    +0x6e4a,
    +0x6e53,
    +0x6e5e,
    +0x6e7f,
    +0x6e80,
    +0x6e91,
    +0x6e92,
    +0x6e93,
    +0x6e95,
    +0x6eaa,
    +0x6ec8,
    +0x6ef1,
    +0x6eff,
    +0x6f0e,
    +0x6f24,
    +0x6f3b,
    +0x6f40,
    +0x6f5f,
    +0x6f8a,
    +0x6fa5,
    +0x6fc1,
    +0x6fe4,
    +0x7390,
    +0x73a5,
    +0x73ac,
    +0x73af,
    +0x73b0,
    +0x73c4,
    +0x73d6,
    +0x73d8,
    +0x73e6,
    +0x7674,
    +0x7681,
    +0x768e,
    +0x77b0,
    +0x77b9,
    +0x77bd,
    +0x77cb,
    +0x77cf,
    +0x78de,
    +0x797,
    +0x790a,
    +0x7930,
    +0x7940,
    +0x7950,
    +0x79c1,
    +0x7a26,
    +0x7aea,
    +0x7af4,
    +0x7b08,
    +0x7b2f,
    +0x7b5f,
    +0x7b87,
    +0x7bb,
    +0x7bca,
    +0x7c00,
    +0x7c07,
    +0x7c1,
    +0x7c7,
    +0x7c8b,
    +0x7c9b,
    +0x7cab,
    +0x7cbb,
    +0x7ccb,
    +0x7cd,
    +0x7cdc,
    +0x7d05,
    +0x7d15,
    +0x7d3,
    +0x7d83,
    +0x7d93,
    +0x7df5,
    +0x7e2a,
    +0x7e47,
    +0x7ec9,
    +0x7f1d,
    +0x7f48,
    +0x7f81,
    +0x7fb9,
    +0x7fca,
    +0x8035,
    +0x80a1,
    +0x80be,
    +0x80f2,
    +0x8112,
    +0x813f,
    +0x8146,
    +0x81dc,
    +0x81ee,
    +0x82a3,
    +0x82b1,
    +0x82bc,
    +0x82cf,
    +0x8393,
    +0x83b8,
    +0x83d0,
    +0x840a,
    +0x847f,
    +0x84cb,
    +0x851a,
    +0x855d,
    +0x8748,
    +0x8763,
    +0x8778,
    +0x8786,
    +0x8788,
    +0x879d,
    +0x87c0,
    +0x87c4,
    +0x87de,
    +0x87e2,
    +0x87f6,
    +0x880f,
    +0x8812,
    +0x8816,
    +0x883e,
    +0x8841,
    +0x8844,
    +0x884a,
    +0x8850,
    +0x8855,
    +0x885b,
    +0x8861,
    +0x8869,
    +0x8872,
    +0x888a,
    +0x889b,
    +0x88ac,
    +0x88c7,
    +0x88e4,
    +0x88ff,
    +0x891c,
    +0x8931,
    +0x894b,
    +0x8964,
    +0x8973,
    +0x8975,
    +0x89a0,
    +0x89b8,
    +0x89d1,
    +0x89e9,
    +0x8a02,
    +0x8a24,
    +0x8a4c,
    +0x8a68,
    +0x8c55,
    +0x8cfd,
    +0x8d49,
    +0x8d52,
    +0x8d5b,
    +0x8d64,
    +0x8d6d,
    +0x8d8d,
    +0x8db5,
    +0x8dc1,
    +0x8dcd,
    +0x8dec,
    +0x8dff,
    +0x8e3b,
    +0x8e6c,
    +0x8e9d,
    +0x8eae,
    +0x8ec7,
    +0x8edc,
    +0x8eee,
    +0x8f03,
    +0x8f18,
    +0x8f42,
    +0x8f5f,
    +0x8f7c,
    +0x8faa,
    +0x8fe3,
    +0x900c,
    +0x902a,
    +0x903f,
    +0x9060,
    +0x9081,
    +0x90a2,
    +0x90b7,
    +0x90cc,
    +0x90df,
    +0x90f1,
    +0x911e,
    +0x9130,
    +0x9142,
    +0x9162,
    +0x91a0,
    +0x91e6,
    +0x920e,
    +0x9231,
    +0x925f,
    +0x928a,
    +0x92cf,
    +0x9317,
    +0x9359,
    +0x9381,
    +0x93c1,
    +0x93fc,
    +0x9428,
    +0x948b,
    +0x94ab,
    +0x994d,
    +0x9965,
    +0x9976,
    +0x9987,
    +0x9998,
    +0x99a9,
    +0x99ba,
    +0x99cf,
    +0xa03c,
    +0xa040,
    +0xa052,
    +0xa07d,
    +0xa0ae,
    +0xa0da,
    +0xa0fd,
    +0xa121,
    +0xa146,
    +0xa171,
    +0xa19c,
    +0xa1bc,
    +0xaa18,
    +0xaa1c,
    +0xaa20,
    +0xaa21,
    +0xaa22,
    +0xaa39,
    +0xaa4f,
    +0xaa64,
    +0xaa7b,
    +0xaa91,
    +0xaa97,
    +0xb91e,
    +0xb953,
    +0xb958,
    +0xb96d,
    +0xb98f,
    +0xbcd8,
    +0xbcdc,
    +0xbce2,
    +0xbd12,
    +0xbd2d,
    +0xbd47,
    +0xbd5c,
    +0xbd62,
    +0xbd67,
    +0xbd6a,
    +0xbd84,
    +0xbd99,
    +0xbdae,
    +0xbdb4,
    +0xbdba,
    +0xbdbf,
    +0xbdc5,
    +0xbdcb,
    +0xbdd3,
    +0xbddc,
    +0xbdeb,
    +0xbe0c,
    +0xbe20,
    +0xbe21,
    +0xc070,
    +0xc08a,
    +0xc28,
    +0xc9d0,
    +0xc9d5,
    +0xd158,
    +0xd15c,
    +0xd160,
    +0xd164,
    +0xd168,
    +0xd16c,
    +0xd170,
    +0xd174,
    +0xd178,
    +0xd17c,
    +0xd180,
    +0xd184,
    +0xd188,
    +0xd254,
    +0xd265,
    +0xd268,

    # Linux errno messages.
    +0xd52a,
    +0xd52b,
    +0xd543,
    +0xd55d,
    +0xd56d,
    +0xd585,
    +0xd58f,
    +0xd5a9,
    +0xd5c0,
    +0xd5d2,
    +0xd5e2,
    +0xd5f5,
    +0xd5ff,
    +0xd60d,
    +0xd61f,
    +0xd62b,
    +0xd641,
    +0xd659,
    +0xd665,
    +0xd677,
    +0xd686,
    +0xd696,
    +0xd6a5,
    +0xd6b6,
    +0xd6ca,
    +0xd6de,
    +0xd6ef,
    +0xd6fe,
    +0xd70d,
    +0xd725,
    +0xd732,
    +0xd748,
    +0xd757,
    +0xd763,
    +0xd765,
    +0xd767,
    +0xd769,
    +0xd77c,
    +0xd796,
    +0xd7af,
    +0xd7c3,

    # Coherent errno messages. Not needed.
    #+0xd52c,
    #+0xd52d,
    #+0xd540,
    #+0xd55a,
    #+0xd56a,
    #+0xd582,
    #+0xd58c,
    #+0xd5a6,
    #+0xd5b8,
    #+0xd5ca,
    #+0xd5da,
    #+0xd5e6,
    #+0xd5f8,
    #+0xd60a,
    #+0xd61c,
    #+0xd628,
    #+0xd63e,
    #+0xd650,
    #+0xd65c,
    #+0xd66e,
    #+0xd67d,
    #+0xd68d,
    #+0xd69c,
    #+0xd6ad,
    #+0xd6c1,
    #+0xd6d5,
    #+0xd6e6,
    #+0xd6f0,
    #+0xd6ff,
    #+0xd717,
    #+0xd724,
    #+0xd73a,
    #+0xd749,
    #+0xd755,
    #+0xd763,
    #+0xd774,
    #+0xd788,
    #+0xd79a,
    #+0xd7aa,
    #+0xd7c1,
    #+0xd7cd,
    #+0xd7d6,

    +0xdcc,
    +0xde2,
    +0xdfb,
    +0xe07,
    +0xe0d1,
    +0xe11,
    +0xe145,
    +0xe177,
    +0xe184,
    +0xe188,
    +0xe18c,
    +0xe1b6,
    +0xe1d1,
    +0xe1d5,
    +0xe1d9,
    +0xe1f1,
    +0xe21,
    +0xe232,
    +0xe249,
    +0xe31,
    +0xe41,
    +0xe44c,
    +0xe45c,
    +0xe484,
    +0xe5a,
    +0xe5ac,
    +0xe5c4,
    +0xe60c,
    +0xe68,
    +0xe87c,
    +0xe934,
    +0xeb58,
    +0xeb98,
    +0xebe,
    +0xec20,
    +0xecbc,
    +0xecd4,
    +0xed5,
    +0xedc,
    +0xedc2,
    +0xedcc,
    +0xeeb,
    +0xf08,
    +0xf25,
    +0xf29,
    +0xf2d,
    +0xf46,
    +0xf57,
    +0xf63,
    +0xf74,
    +0xfa2,
    +0xfbb,
    +0xfc8,
    +0xfcd,
    +0xfda,
    +0xfe8,
    +0xff6,
);

sub add1($$) {
  my($addr, $d) = @_;
  $allowed_text_addrs{$d} = 1;
  push @patch_addrs, $addr;
}

# Names in hash_entry_struct values for builtins.
add1(0x401f88, 0x501c);
add1(0x401fac, 0x501e);
add1(0x401fd0, 0x5022);
add1(0x401ff4, 0x5026);
add1(0x402018, 0x502b);
add1(0x40203c, 0x502f);
add1(0x402060, 0x5033);
add1(0x402084, 0x5038);
add1(0x4020a8, 0x503c);
add1(0x4020cc, 0x5040);
add1(0x4020f0, 0x5045);
add1(0x402114, 0x5049);
add1(0x402138, 0x504d);
add1(0x40215c, 0x5052);
add1(0x402180, 0x5056);
add1(0x4021a4, 0x505a);
add1(0x4021c8, 0x505f);
add1(0x4021ec, 0x5063);
add1(0x402210, 0x5067);
add1(0x402234, 0x506c);
add1(0x402258, 0x5070);
add1(0x40227c, 0x5074);
add1(0x4022a0, 0x5079);
add1(0x4022c4, 0x507d);
add1(0x4022e8, 0x5081);
add1(0x40230c, 0x5086);
add1(0x402330, 0x508a);
add1(0x402354, 0x508e);
add1(0x402378, 0x5092);
add1(0x40239c, 0x5096);
add1(0x4023c0, 0x509a);
add1(0x4023e4, 0x509e);
add1(0x402408, 0x50a3);
add1(0x40242c, 0x50a8);
add1(0x402450, 0x50ad);
add1(0x402474, 0x50b2);
add1(0x402498, 0x50b7);
add1(0x4024bc, 0x50bc);
add1(0x4024e0, 0x50c1);
add1(0x402504, 0x50c6);
add1(0x402528, 0x50cb);
add1(0x40254c, 0x50d0);
add1(0x402570, 0x50d5);
add1(0x402594, 0x50d9);
add1(0x4025b8, 0x50de);
add1(0x4025dc, 0x50e3);
add1(0x402600, 0x50ec);
add1(0x402624, 0x50f4);
add1(0x402648, 0x50fd);
add1(0x40266c, 0x5107);
add1(0x402690, 0x510f);
add1(0x4026b4, 0x5117);
add1(0x4026d8, 0x511e);



# --- Patch applier code.

die "Usage: $0 ./patch.pl <input-file> <output-file> <new-text-base>\n" if @ARGV != 3;
# TODO(pts): Fail, not just write.
my $text_base = $ARGV[2] =~ m@^0[xX]@ ? hex($ARGV[2]) : $ARGV[2] =~ m@^0@ ? oct($ARGV[2]) : int($ARGV[2]);
die "fatal: text base too small: $ARGV[2]\n" if not $text_base or $text_base < 0;
my $fnin = $ARGV[0];
my $fnout = $ARGV[1];

# Filename fix for Perl 5.004_04 for filenames starting with whitespace etc.
sub fnopenq($) { $_[0] =~ m@[-+.\w]@ ? $_[0] : "./" . $_[0] }
die "fatal: error opening: $fnin\n" if !open(FIN, "<" . fnopenq($fnin));
binmode(FIN);
my $s = join("", <FIN>);
close(FIN);
die "assert: expecting ELF Linux i386 executable: $fnin\n" if
   $s !~ m@^\x7fELF\x01\x01\x01[\0\x03]\0\0\0\0\0\0\0\0\x02\0\x03\0\x01\0\0\0@;
die "assert: bad file size: $fnin\n" if length($s) != $expected_size;
sub gw($) {  # Get 16-bit word.
  die "assert: offset too large: $_[0]\n" if $_[0] + 2 > length($s);
  return unpack("v", substr($s, $_[0], 2));
}
sub gd($) {  # Get 32-bit doubleword (dword).
  die "assert: offset too large: $_[0]\n" if $_[0] + 4 > length($s);
  return unpack("V", substr($s, $_[0], 4));
}
sub sd($$) {  # Set 32-bit doubleword (dword).
  die "assert: offset too large: $_[0]\n" if $_[0] + 4 > length($s);
  substr($s, $_[0], 4) = pack("V", $_[1]);
}
die sprintf("assert: unexpected entry point: 0x%x\n", gd(0x18)) if gd(0x18) != $expected_entry;
die "assert: bad phdr count\n" if gw(0x2c) != 2;
die "assert: bad phdr0\n" if gd(0x34) != 1 or gd(0x38) != 0 or gd(0x3c) != 0 or gd(0x40) != 0;
die "assert: bad phdr0 size\n" if gd(0x44) != gd(0x48);
die "assert: bad phdr1\n" if gd(0x54) != 1 or gd(0x58) != gd(0x44) or gd(0x5c) < gd(0x58) or gd(0x68) < gd(0x64);
die "assert: bad phdr1 size\n" if gd(0x58) + gd(0x64) != $expected_size;
my $text_size = gd(0x44);
my $text_end = $text_base + $text_size;
my $data_base_page = gd(0x5c) & ~0xfff;
die sprintf("fatal: text base too large, we should have text_end <= data_base_page, but we have: 0x%x > 0x%x\n") if
    $text_end > $data_base_page;
my $data_fofs = gd(0x58);
my $data_addr = gd(0x5c);

sub get_inst_add_at($) {  # Useful for debugging.
  pos($s) = $_[0];
  $s =~ m@\G\xf6[\x83\x87]@gc ? 2 :
  $s =~ m@\G\xc7\x05@gc ? 6 :
  $s =~ m@\G[\x05\x3d\x68\xb8\xba\xbe]@gc ? 1 :
  $s =~ m@\G(?:\x81\xc7|\x8a\x81|\x8a\x86|\xf7\x2d|\xf7\x35|\xf7\x3d)@gc ? 2 :
  $s =~ m@\G(?:\x0f\xb6\x81|\x0f\xb6\x89|\x0f\xb7\x05|\x0f\xb7\x81|\xc7\x43\x10|\xc7\x43\x14|\xc7\x45\xf8|\xff\x24\x85)@gc ? 3 :
  die(sprintf("unknown instruction at 0x%x: %s\n", $_[0], unpack("H*", substr($s, $_[0], 4))))
}

my $errc = 0;
for my $addr (@patch_addrs) {
  if ($addr < 0) {  # Dead code, useful for debugging.
    my $delta = get_inst_add_at(-$addr);
    printf STDERR "info: add 0x%x+%d\n", -$addr, $delta;
    #printf "    0x%x+%d,\n", -$addr, $delta;
    next;
  }
  my $ofs = ($addr < $data_addr ? $addr : $addr - $data_addr + $data_fofs);
  my $d = gd($ofs);
  my $is_allowed = exists($allowed_text_addrs{$d}) ? 1 : 0;
  $is_allowed = 1 if !$d and $ofs == 0x3c or $ofs == 0x40;  # Section .text (phdr0) vaddr and paddr.
  if ($is_allowed) {
    printf STDERR "info: adding: addr=0x%x d=0x%x\n", $addr, $d;
    sd($ofs, $d + $text_base);
  } else {
    printf STDERR "error: not allowed to patch: addr=0x%x d=0x%x\n", $addr, $d;
    ++$errc;
  }
}
die "fatal: found $errc error@{[q(s)x($errc!=1)]}, aborting\n" if $errc;

die "fatal: error opening: $fnout\n" if !open(FOUT, ">" . fnopenq($fnout));
binmode(FOUT);
die "fatal: error writing: $fnout\n" if !print(FOUT $s);
die "fatal: error closing: $fnout\n" if !close(FOUT);
print "info: patching OK, output file written: $fnout\n";

__END__
/